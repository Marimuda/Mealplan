// <auto-generated />
using MealPlan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MealPlan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("MealPlan.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MealPlan.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("DisplayedName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'Anonymous'")
                        .HasMaxLength(30);

                    b.Property<sbyte>("Role")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AccountId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("MealPlan.Models.ActivityLevel", b =>
                {
                    b.Property<int>("BioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<sbyte>("Activity")
                        .HasColumnName("Activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ActivityDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("BioId");

                    b.HasIndex("BioId")
                        .HasName("FKactivity_l263631");

                    b.ToTable("activity_level");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetroleclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetroles", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserlogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserroles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetusers", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetusertokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("MealPlan.Models.BioData", b =>
                {
                    b.Property<int>("BioId")
                        .HasColumnType("int(10)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<sbyte>("Height")
                        .HasColumnType("tinyint(3)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int(10)");

                    b.Property<sbyte>("Weight")
                        .HasColumnType("tinyint(3)");

                    b.HasKey("BioId");

                    b.HasIndex("PersonId")
                        .HasName("FKBio_data523729");

                    b.ToTable("bio_data");
                });

            modelBuilder.Entity("MealPlan.Models.CourseRecipeChoices", b =>
                {
                    b.Property<short>("CourseId")
                        .HasColumnType("smallint(5)");

                    b.Property<int>("RecipesId")
                        .HasColumnType("int(10)");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int(10)");

                    b.HasKey("CourseId", "RecipesId");

                    b.HasIndex("RecipesId")
                        .HasName("FKCourse_Rec894165");

                    b.HasIndex("CourseId", "MenuId")
                        .HasName("FKCourse_Rec371103");

                    b.ToTable("course_recipe_choices");
                });

            modelBuilder.Entity("MealPlan.Models.CourseType", b =>
                {
                    b.Property<short>("CourseIdr")
                        .HasColumnType("smallint(5)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int(10)");

                    b.Property<string>("CourseType1")
                        .IsRequired()
                        .HasColumnName("CourseType")
                        .HasMaxLength(50);

                    b.HasKey("CourseIdr", "MenuId");

                    b.HasIndex("CourseIdr", "MenuId")
                        .IsUnique()
                        .HasName("FKCourse_typ472992");

                    b.ToTable("course_type");
                });

            modelBuilder.Entity("MealPlan.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(95);

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("MealPlan.Models.Ingredients", b =>
                {
                    b.Property<short>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IngredientId");

                    b.ToTable("ingredients");
                });

            modelBuilder.Entity("MealPlan.Models.Logins", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("bit(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("char(64)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("PersonId")
                        .HasColumnType("int(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("AccountId");

                    b.HasIndex("PasswordHash")
                        .IsUnique()
                        .HasName("PasswordHash");

                    b.HasIndex("PersonId")
                        .HasName("FKLogins640643");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("Username");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("MealPlan.Models.Memberships", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int(10)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'CURRENT_TIMESTAMP'");

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<sbyte>("FailedAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int(10)");

                    b.Property<string>("PasswordAnswer")
                        .HasMaxLength(255);

                    b.Property<string>("PasswordQuestion")
                        .HasMaxLength(255);

                    b.HasKey("MembershipId");

                    b.HasIndex("AccountId")
                        .HasName("FKMembership716389");

                    b.HasIndex("LoginId")
                        .HasName("FKMembership459979");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("MealPlan.Models.MenuCourse", b =>
                {
                    b.Property<short>("CourseId")
                        .HasColumnType("smallint(5)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int(10)");

                    b.Property<string>("CimageUrl")
                        .HasColumnName("CImageUrl")
                        .HasMaxLength(255);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CourseId", "MenuId");

                    b.HasIndex("MenuId")
                        .HasName("FKMenu_Cours370256");

                    b.ToTable("menu_course");
                });

            modelBuilder.Entity("MealPlan.Models.MenuCourses", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id")
                        .HasColumnType("int(10)");

                    b.Property<sbyte>("CourseNumber")
                        .HasColumnName("course_number")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnName("course_name")
                        .HasMaxLength(50);

                    b.HasKey("MenuId", "CourseNumber");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasName("menu_id");

                    b.ToTable("menu_courses");
                });

            modelBuilder.Entity("MealPlan.Models.Persons", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PersonId");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("MealPlan.Models.RecipeRatning", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int(10)");

                    b.Property<short?>("RecipeRating")
                        .HasColumnType("smallint(5)");

                    b.HasKey("RecipeId");

                    b.HasIndex("RecipeId")
                        .IsUnique()
                        .HasName("FKRecipe_Rat281140");

                    b.ToTable("recipe_ratning");
                });

            modelBuilder.Entity("MealPlan.Models.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int(10)");

                    b.Property<DateTimeOffset>("ReCreationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'CURRENT_TIMESTAMP'");

                    b.Property<byte[]>("RecipeDescription")
                        .IsRequired()
                        .HasColumnType("blob");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RecipeId");

                    b.HasIndex("AccountId")
                        .HasName("FKRecipes688032");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("MealPlan.Models.RecipeStepsIngredients", b =>
                {
                    b.Property<sbyte>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(2)");

                    b.Property<short>("Amount")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("IngredientId")
                        .HasColumnType("smallint(5)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int(10)");

                    b.HasKey("StepId");

                    b.HasIndex("IngredientId")
                        .HasName("FKRecipe_Ste374390");

                    b.HasIndex("RecipeId")
                        .HasName("FKRecipe_Ste135474");

                    b.ToTable("recipe_steps_ingredients");
                });

            modelBuilder.Entity("MealPlan.Models.SuggestedMenus", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("MenuDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("MenuId");

                    b.ToTable("suggested_menus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetroleclaims", b =>
                {
                    b.HasOne("MealPlan.Models.Aspnetroles", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserclaims", b =>
                {
                    b.HasOne("MealPlan.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserlogins", b =>
                {
                    b.HasOne("MealPlan.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Aspnetuserroles", b =>
                {
                    b.HasOne("MealPlan.Models.Aspnetroles", "Role")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MealPlan.Models.Aspnetusers", "User")
                        .WithMany("Aspnetuserroles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.BioData", b =>
                {
                    b.HasOne("MealPlan.Models.ActivityLevel", "ActivityLevel")
                        .WithOne("Bio")
                        .HasForeignKey("MealPlan.Models.BioData", "BioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MealPlan.Models.Persons", "Person")
                        .WithMany("BioData")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FKBio_data523729");
                });

            modelBuilder.Entity("MealPlan.Models.CourseRecipeChoices", b =>
                {
                    b.HasOne("MealPlan.Models.Recipes", "Recipes")
                        .WithMany("CourseRecipeChoices")
                        .HasForeignKey("RecipesId")
                        .HasConstraintName("FKCourse_Rec894165")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MealPlan.Models.MenuCourse", "MenuCourse")
                        .WithMany("CourseRecipeChoices")
                        .HasForeignKey("CourseId", "MenuId")
                        .HasConstraintName("FKCourse_Rec371103");
                });

            modelBuilder.Entity("MealPlan.Models.CourseType", b =>
                {
                    b.HasOne("MealPlan.Models.MenuCourse", "MenuCourse")
                        .WithOne("CourseType")
                        .HasForeignKey("MealPlan.Models.CourseType", "CourseIdr", "MenuId")
                        .HasConstraintName("FKCourse_typ472992")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Logins", b =>
                {
                    b.HasOne("MealPlan.Models.Persons", "Person")
                        .WithMany("Logins")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FKLogins640643")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Memberships", b =>
                {
                    b.HasOne("MealPlan.Models.Account", "Account")
                        .WithMany("Memberships")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FKMembership716389")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MealPlan.Models.Logins", "Login")
                        .WithMany("Memberships")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FKMembership459979")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.MenuCourse", b =>
                {
                    b.HasOne("MealPlan.Models.SuggestedMenus", "Menu")
                        .WithMany("MenuCourse")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FKMenu_Cours370256");
                });

            modelBuilder.Entity("MealPlan.Models.RecipeRatning", b =>
                {
                    b.HasOne("MealPlan.Models.Recipes", "Recipe")
                        .WithOne("RecipeRatning")
                        .HasForeignKey("MealPlan.Models.RecipeRatning", "RecipeId")
                        .HasConstraintName("FKRecipe_Rat281140")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.Recipes", b =>
                {
                    b.HasOne("MealPlan.Models.Account", "Account")
                        .WithMany("Recipes")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FKRecipes688032")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealPlan.Models.RecipeStepsIngredients", b =>
                {
                    b.HasOne("MealPlan.Models.Ingredients", "Ingredient")
                        .WithMany("RecipeStepsIngredients")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FKRecipe_Ste374390");

                    b.HasOne("MealPlan.Models.Recipes", "Recipe")
                        .WithMany("RecipeStepsIngredients")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FKRecipe_Ste135474")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MealPlan.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MealPlan.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MealPlan.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MealPlan.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

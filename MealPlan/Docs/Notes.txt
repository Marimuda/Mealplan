Asynchronous programming is the default mode for ASP.NET Core and EF Core.

A web server has a limited number of threads available, and in high load situations all of the available threads might be in use. 
When that happens, the server can't process new requests until the threads are freed up. With synchronous code, many threads may be tied up 
while they aren't actually doing any work because they're waiting for I/O to complete. With asynchronous code, when a process is waiting 
for I/O to complete, its thread is freed up for the server to use for processing other requests. As a result, asynchronous code enables server 
resources to be used more efficiently, and the server is enabled to handle more traffic without delays.

Asynchronous code does introduce a small amount of overhead at run time. For low traffic situations, the performance hit is negligible, 
while for high traffic situations, the potential performance improvement is substantial.

https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro#asynchronous-code

